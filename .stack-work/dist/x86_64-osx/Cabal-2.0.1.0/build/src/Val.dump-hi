
==================== FINAL INTERFACE ====================
2018-06-03 19:10:46.808568 UTC

interface LETLanguage-0.1.0.0-AjjNVn9s5sDzZ7DWIwnd3:Val 8022
  interface hash: fa7918398304a01d64eb53e319a4fa58
  ABI hash: 39961ad844af2fe8f0995479f4c85015
  export-list hash: 657dcda7d5828675d2309443963dc934
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: da92623ea998ab273ee924eaf462f7dc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Val.val2Bool
  Val.val2Int
  Val.val2List
  Val.Val{Val.VBool Val.VInt Val.VList}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.2 transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  mtl-2.2.2:Control.Monad.Error.Class 2adfab0432a1e2ba3b17fda5c892a24c
import  -/  mtl-2.2.2:Control.Monad.Except 67b2229f0dd27ff895cb1fdcade8078a
a01b0276a2b7fa8b8c11ed084c5e56ac
  $fShowVal :: GHC.Show.Show Val.Val
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Val.Val
                  Val.$fShowVal_$cshowsPrec
                  Val.$fShowVal_$cshow
                  Val.$fShowVal_$cshowList -}
a01b0276a2b7fa8b8c11ed084c5e56ac
  $fShowVal1 :: Val.Val -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Val.Val) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (Val.$fShowVal_$cshow x))
                   s) -}
a01b0276a2b7fa8b8c11ed084c5e56ac
  $fShowVal_$cshow :: Val.Val -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
a01b0276a2b7fa8b8c11ed084c5e56ac
  $fShowVal_$cshowList :: [Val.Val] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Val.Val]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Val.Val Val.$fShowVal1 ls s) -}
a01b0276a2b7fa8b8c11ed084c5e56ac
  $fShowVal_$cshowsPrec :: GHC.Types.Int -> Val.Val -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int) (x :: Val.Val) (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (Val.$fShowVal_$cshow x))
                   s) -}
2fb860b69822752c19b0342163b229ba
  $tc'VBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6553243842173119013##
                   18180161630857878879##
                   Val.$trModule
                   Val.$tc'VBool2
                   0#
                   Val.$tc'VBool1) -}
5d833960cefc4556f685e1b203c16c6a
  $tc'VBool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4a285a3d0cbf60e5d3603bbd6863a61b
  $tc'VBool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Val.$tc'VBool3) -}
4f6d10a10f112ce76da0a099df5986fc
  $tc'VBool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VBool"#) -}
7dfb79faf0784fd9a2642df9261c957b
  $tc'VInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17469152840571751433##
                   16557949861949924939##
                   Val.$trModule
                   Val.$tc'VInt2
                   0#
                   Val.$tc'VInt1) -}
c1c0a43f32cafce33b47f72c4c56b590
  $tc'VInt1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
724333d979393e3803113061fab49f9e
  $tc'VInt2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Val.$tc'VInt3) -}
e0f5810d6aec306c61c7724bff1e30b1
  $tc'VInt3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VInt"#) -}
bc889ca3bb7ad88e7b1fb7309c5dcfc8
  $tc'VList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   590118749286746385##
                   16885675252751694019##
                   Val.$trModule
                   Val.$tc'VList2
                   0#
                   Val.$tc'VList1) -}
865345ad378929f11c3992a435cc8edd
  $tc'VList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e3e32f133339bef913cf315fa7d27190
  $tc'VList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Val.$tc'VList3) -}
fa4635598b86c5c2ef05baae628f1184
  $tc'VList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VList"#) -}
9fab00cd46180ea4e4a9fcfc500fbb03
  $tcVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11048655317280677894##
                   12881206018155523359##
                   Val.$trModule
                   Val.$trModule1
                   0#
                   GHC.Types.krep$*) -}
76557e002d4b02deaac638039e159e9c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Val.$trModule3 Val.$trModule1) -}
3bbf9e8f1928c3c8bf922284e0f273b2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Val.$trModule2) -}
c767d2f52a4abf7a3564d505139e2903
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Val"#) -}
db87b11f25ddebed6fe20c96b3160b6f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Val.$trModule4) -}
9ab00bbad3523c573be0b8e3496ddae5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LETLanguage-0.1.0.0-AjjNVn9s5sDzZ7DWIwnd3"#) -}
a01b0276a2b7fa8b8c11ed084c5e56ac
  data Val
    = VInt GHC.Types.Int | VBool GHC.Types.Bool | VList [Val.Val]
a01f0314112ae02b33736efd8188bfb2
  val2Bool ::
    Control.Monad.Error.Class.MonadError GHC.Base.String m =>
    Val.Val -> m GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U(A,1*C1(U),A,A,A,A),A,A,A,A),1*C1(U),A)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      GHC.Base.String m)
                   (eta :: Val.Val) ->
                 case eta of wild {
                   DEFAULT
                   -> Control.Monad.Error.Class.throwError
                        @ [GHC.Types.Char]
                        @ m
                        $dMonadError
                        @ GHC.Types.Bool
                        (GHC.CString.unpackAppendCString#
                           Val.val2Bool5
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Val.val2Bool3
                              (GHC.CString.unpackAppendCString#
                                 Val.val2Bool2
                                 (case wild of wild1 {
                                    Val.VInt i
                                    -> case i of ww2 { GHC.Types.I# ww3 ->
                                       case GHC.Show.$wshowSignedInt
                                              0#
                                              ww3
                                              (GHC.Types.[]
                                                 @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                                    Val.VList xs
                                    -> case xs of wild2 {
                                         [] -> Val.val2Bool1
                                         : x xs1
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__3
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (Val.$fShowVal_$cshow x)
                                                 (Val.val2Bool_showl xs1)) } }))))
                   Val.VBool b
                   -> GHC.Base.pure
                        @ m
                        (GHC.Base.$p1Monad
                           @ m
                           (Control.Monad.Error.Class.$p1MonadError
                              @ GHC.Base.String
                              @ m
                              $dMonadError))
                        @ GHC.Types.Bool
                        b }) -}
4788708de206535bd729d7378fb88d56
  val2Bool1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d1fbe08747bc668aea142c30736fd335
  val2Bool2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", got "#) -}
9a97d28189dc60b2bb549c9f1b35f60a
  val2Bool3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Val.val2Bool4) -}
d37419a6cca1d152b94a46ce30eefc5b
  val2Bool4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bool"#) -}
2bfd37385955e3e88b770a9b1fd73920
  val2Bool5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeError: expected "#) -}
b980afac8c2bb3181a27279f6ed83162
  val2Bool_showl :: [Val.Val] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2 -}
70f310f232f8fd9f7ebc18b4b0759a17
  val2Int ::
    Control.Monad.Error.Class.MonadError GHC.Base.String m =>
    Val.Val -> m GHC.Types.Int
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U(A,1*C1(U),A,A,A,A),A,A,A,A),1*C1(U),A)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      GHC.Base.String m)
                   (eta :: Val.Val) ->
                 case eta of wild {
                   DEFAULT
                   -> Control.Monad.Error.Class.throwError
                        @ [GHC.Types.Char]
                        @ m
                        $dMonadError
                        @ GHC.Types.Int
                        (GHC.CString.unpackAppendCString#
                           Val.val2Bool5
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Val.val2Int1
                              (GHC.CString.unpackAppendCString#
                                 Val.val2Bool2
                                 (case wild of wild1 {
                                    Val.VBool b
                                    -> case b of wild2 {
                                         GHC.Types.False -> GHC.Show.$fShowBool3
                                         GHC.Types.True -> GHC.Show.$fShowBool1 }
                                    Val.VList xs
                                    -> case xs of wild2 {
                                         [] -> Val.val2Bool1
                                         : x xs1
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__3
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (Val.$fShowVal_$cshow x)
                                                 (Val.val2Bool_showl xs1)) } }))))
                   Val.VInt n
                   -> GHC.Base.pure
                        @ m
                        (GHC.Base.$p1Monad
                           @ m
                           (Control.Monad.Error.Class.$p1MonadError
                              @ GHC.Base.String
                              @ m
                              $dMonadError))
                        @ GHC.Types.Int
                        n }) -}
8129314184c254837199acd92fe7ab1a
  val2Int1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Val.val2Int2) -}
0ffdd88c0cc15c13bac19bd40b55b86e
  val2Int2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Int"#) -}
2b03b3c72c1ca5713378d912927251a8
  val2List ::
    Control.Monad.Error.Class.MonadError GHC.Base.String m =>
    Val.Val -> m [Val.Val]
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U(A,1*C1(U),A,A,A,A),A,A,A,A),1*C1(U),A)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      GHC.Base.String m)
                   (eta :: Val.Val) ->
                 case eta of wild {
                   DEFAULT
                   -> Control.Monad.Error.Class.throwError
                        @ [GHC.Types.Char]
                        @ m
                        $dMonadError
                        @ [Val.Val]
                        (GHC.CString.unpackAppendCString#
                           Val.val2Bool5
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Val.val2List1
                              (GHC.CString.unpackAppendCString#
                                 Val.val2Bool2
                                 (case wild of wild1 {
                                    Val.VInt i
                                    -> case i of ww2 { GHC.Types.I# ww3 ->
                                       case GHC.Show.$wshowSignedInt
                                              0#
                                              ww3
                                              (GHC.Types.[]
                                                 @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                                    Val.VBool b
                                    -> case b of wild2 {
                                         GHC.Types.False -> GHC.Show.$fShowBool3
                                         GHC.Types.True -> GHC.Show.$fShowBool1 } }))))
                   Val.VList b
                   -> GHC.Base.pure
                        @ m
                        (GHC.Base.$p1Monad
                           @ m
                           (Control.Monad.Error.Class.$p1MonadError
                              @ GHC.Base.String
                              @ m
                              $dMonadError))
                        @ [Val.Val]
                        b }) -}
2c0483a3e2a26d9e0c30ecebd5face25
  val2List1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Val.val2List2) -}
66ea1232395c34f04c830f9908f32d1e
  val2List2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("List"#) -}
instance [safe] GHC.Show.Show [Val.Val] = Val.$fShowVal
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

